// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bio           String?
  phone         String?
  picturePath   String?
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       String    @db.ObjectId
  posts         Post[]

  @@map("users")
}

model Group {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  ownerId     String @unique @db.ObjectId
  members     User[]
  posts       Post[]

  @@map("groups")
}

model Post {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  picturePath String?
  author      User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String  @db.ObjectId
  group       Group   @relation(references: [id], fields: [groupId], onUpdate: NoAction)
  groupId     String  @db.ObjectId

  @@map("posts")
}
