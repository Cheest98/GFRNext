// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bio           String?
  phone         String?
  picturePath   String?
  group         Group?     @relation(fields: [groupId], references: [id])
  groupId       String?    @db.ObjectId
  posts         Post[]
  tasks         Task[]
  lists         List[]
  event         Event[]
  activities    Activity[]

  @@map("users")
}

model Group {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  ownerId     String     @unique @db.ObjectId
  password    String
  members     User[]
  posts       Post[]
  tasks       Task[]
  lists       List[]
  event       Event[]
  activities  Activity[]

  @@map("groups")
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String // e.g., "POST_CREATED", "TASK_UPDATED"
  userId    String   @db.ObjectId
  groupId   String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])

  @@map("activities")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  picturePath String?
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @db.ObjectId
  group       Group    @relation(references: [id], fields: [groupId], onUpdate: NoAction, onDelete: Cascade)
  groupId     String   @db.ObjectId
  createdAt   DateTime @default(now())

  @@map("posts")
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  task        String
  description String?
  status      String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @db.ObjectId
  group       Group    @relation(references: [id], fields: [groupId], onUpdate: NoAction, onDelete: Cascade)
  groupId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("tasks")
}

model List {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  list      String
  price     Float?
  status    String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String    @db.ObjectId
  group     Group     @relation(references: [id], fields: [groupId], onUpdate: NoAction, onDelete: Cascade)
  groupId   String    @db.ObjectId
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@map("lists")
}

model Product {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  product String
  status  String
  list    List   @relation(fields: [listid], references: [id], onDelete: Cascade)
  listid  String @db.ObjectId

  @@map("products")
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  start       DateTime
  end         DateTime
  allDay      Boolean  @default(false)
  authorId    String   @db.ObjectId
  groupId     String?  @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id])
  group       Group?   @relation(fields: [groupId], references: [id])

  @@map("events")
}
